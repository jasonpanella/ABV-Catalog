apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
//apply plugin: 'com.apollographql.apollo'
apply plugin: "androidx.navigation.safeargs.kotlin"
apply plugin: 'de.mannodermaus.android-junit5'
// Add the Firebase Crashlytics plugin.
apply plugin: 'com.google.firebase.crashlytics'
// Apply the Performance Monitoring plugin
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: "com.apollographql.apollo"
apply plugin: 'realm-android'

// Load key store properties from file
def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

def configuration = rootProject.extensions.getByName("ext")
android {
    compileSdkVersion configuration.android['compileSdkVersion']
    buildToolsVersion configuration.android['buildToolsVersion']
    defaultConfig {
        applicationId "com.acosta.ftg"
        minSdkVersion configuration.android['minSdkVersion']
        targetSdkVersion configuration.android['targetSdkVersion']
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    testOptions {
        animationsDisabled true
        unitTests.returnDefaultValues = true

        unitTests {
            includeAndroidResources = true
        }
    }

    signingConfigs {
        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled = true
            signingConfig signingConfigs.config
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }

    compileOptions {
        sourceCompatibility configuration.java_version
        targetCompatibility configuration.java_version
    }

    kotlinOptions {
        jvmTarget = configuration.java_version
    }

    packagingOptions {
        pickFirst "META-INF/AL2.0"
        pickFirst "META-INF/LGPL2.1"
    }

    sourceSets {
        // Adds exported schema location as test app assets.
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }
}

androidExtensions {
    experimental = true
}

realm {
    syncEnabled = false
}

dependencies {
    def nav_version = '2.3.1'
    def stetho_version = '1.5.1'
    def koin_version = '2.0.1'
    def workmanager_version = '2.4.0'
    def arch_version = '2.1.0'
    def fbflipper_version = '0.81.0'

    // OTHER SOLUTION MODULES
    implementation project(':domain')
    implementation project(':common')
 //   implementation project(':workflow-lib')
//    implementation project(':json-form-renderer')
 //   testImplementation project(':test-utils-android')
//    androidTestImplementation project(':test-utils-android')

    // ANDROID
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "androidx.activity:activity-ktx:$androidx_activity_version"
    implementation "androidx.fragment:fragment-ktx:$androidx_fragment_version"
    implementation 'androidx.browser:browser:1.2.0'
    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout_version"
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation "com.google.android.material:material:$android_material_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    // CAMERA
    implementation 'io.fotoapparat:fotoapparat:2.7.0'

    // BARCODE SCANNER
    implementation 'com.journeyapps:zxing-android-embedded:4.0.2'

    // FIREBASE
    // Import the BoM for the Firebase platform
    implementation platform('com.google.firebase:firebase-bom:26.1.0')
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation 'com.google.firebase:firebase-perf-ktx'

    // KOTLIN
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"

    // LIFE CYCLE
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"

    // KOIN DI/IoC
    implementation "org.koin:koin-androidx-viewmodel:$koin_version"
    implementation "org.koin:koin-androidx-ext:$koin_version"
    androidTestImplementation("org.koin:koin-test:$koin_version") {
        exclude group: 'org.mockito'
    }

    // JUNIT5
    // (Required) Writing and executing Unit Tests on the JUnit Platform
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit5_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit5_version"

    // (Optional) If you need "Parameterized Tests"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit5_version"

    // (Optional) If you also have JUnit 4-based tests
    testImplementation "junit:junit:$junit_version"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:$junit5_version"

    // TESTING
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    androidTestImplementation "androidx.test.ext:junit:$test_runner_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_core_version"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$nhaarman_mockito_version"
    testImplementation "org.mockito:mockito-core:$mockito_version"
    testImplementation "org.mockito:mockito-inline:$mockito_version"
    testImplementation "io.mockk:mockk:$mockk_version"

    androidTestImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$nhaarman_mockito_version"
    androidTestImplementation "com.linkedin.dexmaker:dexmaker-mockito-inline:$dexmaker_mockito_inline"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"

    testImplementation "androidx.arch.core:core-testing:$arch_version"

    testImplementation("org.threeten:threetenbp:$threetenabp_version") {
        exclude group: 'com.jakewharton.threetenabp', module: 'threetenabp'
    }

    androidTestImplementation("org.threeten:threetenbp:$threetenabp_version") {
        exclude group: 'com.jakewharton.threetenabp', module: 'threetenabp'
    }
    androidTestImplementation "androidx.arch.core:core-testing:$arch_version"

    // UTILITIES
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "com.jakewharton.threetenabp:threetenabp:$threetenabp_version"

    // WORK MANAGER
    implementation "androidx.work:work-runtime-ktx:$workmanager_version"
    androidTestImplementation "androidx.work:work-testing:$workmanager_version"

    // ROOM
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    testImplementation "androidx.room:room-testing:$room_version"
    androidTestImplementation "androidx.room:room-testing:$room_version"

    // DEBUGGING
    implementation "com.facebook.stetho:stetho:$stetho_version"
    implementation "com.facebook.stetho:stetho-okhttp3:$stetho_version"

    // NEW FACEBOOK FLIPPER TOOL
    implementation 'com.facebook.soloader:soloader:0.10.1'
    implementation "com.facebook.flipper:flipper:$fbflipper_version"
    implementation "com.facebook.flipper:flipper-network-plugin:$fbflipper_version"

    // Microsoft MSAL & Microsoft Graph
    implementation 'com.microsoft.identity.client:msal:1.0.0'

    // Apollo
    implementation "com.apollographql.apollo:apollo-runtime:$apollo_version"
    implementation "com.apollographql.apollo:apollo-coroutines-support:$apollo_version"
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"

    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    // Logging
    implementation "com.jakewharton.timber:timber:$timber_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
    implementation 'com.github.bastienpaulfr:Treessence:1.0.0'

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-scalars:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

    // SIGNATURES
    implementation 'com.github.gcacace:signature-pad:1.3.1'

    // Liquid core library
    implementation files('./libs/liquidcore-V8-0.7.2.aar')
    androidTestImplementation files('./libs/liquidcore-V8-0.7.2.aar')

    //COIL: LOAD IMAGES AND SVG SUPPORT
    implementation "io.coil-kt:coil:$coil_version"
    implementation "io.coil-kt:coil-svg:$coil_version"

    // Azure Storage library
    implementation 'com.microsoft.azure.android:azure-storage-android:2.0.0@aar'

}

apollo {
    // instruct the compiler to generate Kotlin models
    generateKotlinModels.set(true)
}

apply plugin: 'com.google.gms.google-services'

